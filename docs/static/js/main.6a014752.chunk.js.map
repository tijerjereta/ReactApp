{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","protTypes","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","console","log","useFetchGifs","GifExpertApp","categories","divRoot","document","querySelector","ReactDOM","render"],"mappings":"4NAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAmBA,OACI,mCACI,sBAAMC,SAdO,SAACC,GAIlBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAMd,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAvBU,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,eA6BhCZ,EAAYe,UAAY,CACpBd,cAAee,IAAUC,KAAKC,Y,2CCrCpBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEdC,EAFc,0FAE4EC,UAAUH,GAFtF,sBAGDI,MAAOF,GAHN,cAGdG,EAHc,gBAIGA,EAAKC,OAJR,uBAIZC,EAJY,EAIZA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCCRO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGjC,OACI,sBAAKc,UAAU,yCAAf,UACG,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCCHO,EAAU,SAAC,GAAiB,IAAfnB,EAAc,EAAdA,SAElB,ECPoB,SAAEA,GAE1B,MAA0BlB,mBAAS,CAC/ByB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAqBA,OAhBAC,qBAAW,WACPxB,EAASC,GACRwB,MAAM,SAAAC,GAEHC,YAAW,WACPC,QAAQC,IAAIH,GACZH,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAGd,UAGR,CAACpB,IAEGqB,EDhB8BQ,CAAc7B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAGrB,OAFAO,QAAQC,IAAIR,GAIR,qCACG,6BAAMpB,IACJoB,GAAW,2CACb,qBAAKJ,UAAU,WAAf,SAEaH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADEA,EAAIC,aEoB/BmB,EAtCO,WAIlB,MAAoChD,mBAAS,CAAC,YAA9C,mBAAOiD,EAAP,KAAmBlD,EAAnB,KAOA,OAIY,cAHJ,CAGI,sBAGI,8CAEA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEQkD,EAAWtB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,YCvBpCgC,EAAUC,SAASC,cAAc,SAGvCC,IAASC,OAAQ,cAAC,EAAD,IAAmBJ,K","file":"static/js/main.6a014752.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n    const [inputValue, setinputValue] = useState('');\r\n    \r\n    const handleInputChange = (e) => {\r\n        setinputValue( e.target.value );\r\n        \r\n    };\r\n \r\n    const handleSubmit = (e) => {\r\n        \r\n        //alert('valll');\r\n        //setCategories( [...setCategories, inputValue] );\r\n        e.preventDefault(); //evita que el submit del formulario reinicie la pajina\r\n        \r\n        if( inputValue.trim().length > 2 ){\r\n            setCategories( cats => [ inputValue, ...cats  ] );        \r\n            setinputValue('');\r\n        }\r\n\r\n    };\r\n    return (\r\n        <>\r\n            <form onSubmit={ handleSubmit }>\r\n                <input \r\n                    type=\"text\" \r\n                    value={ inputValue }\r\n                    onChange={ handleInputChange }\r\n                />    \r\n            </form>        \r\n        </>\r\n    )\r\n}\r\n\r\nAddCategory.protTypes = {\r\n    setCategories: PropTypes.func.isRequired //De esta forma obligamos a otros usuarios o programadores a enviar las propiedades necesarias!  \r\n}\r\n","\r\nexport  const getGifs = async( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=UTPdZzV5KAGcmIX4xVOLlwnI1S83QYBj&q=${ encodeURI(category)}&limit=10`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n             id: img.id,\r\n             title: img.title, \r\n             url: img.images?.downsized_medium.url\r\n        }\r\n\r\n    })\r\n    return( gifs );\r\n\r\n    //console.log( data );\r\n}\r\n\r\n//getGifs();\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ( {title, url} ) => {\r\n    //console.log(\" props.img \");\r\n    //console.log(id, title, url);\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n           <img src={ url } alt={ title} />\r\n           <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","\r\n\r\nimport React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n//import { useState, useEffect } from 'react/cjs/react.development';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\n\r\nexport const GifGrid = ( {category}) => {\r\n\r\n        const { data:images, loading } = useFetchGifs( category );\r\n        console.log(loading);\r\n  \r\n        return (\r\n           \r\n            <>\r\n               <h3>{ category }</h3>\r\n               { loading && <p>Loading...</p>  }  \r\n               <div className=\"cardGrid\">\r\n                        {\r\n                            images.map( img =>(\r\n                                <GifGridItem \r\n                                    key={ img.id }\r\n                                    {...img } />\r\n                            ))\r\n                        }   \r\n                </div>\r\n            \r\n            </>\r\n        )\r\n   \r\n}\r\n","import { useState } from 'react';\r\nimport { useEffect } from \"react/cjs/react.development\";\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs( category )\r\n        .then( imgs => {\r\n\r\n            setTimeout(() => {\r\n                console.log(imgs);\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n                    \r\n            }, 3000);\r\n        })\r\n\r\n    }, [category])\r\n\r\n    return state;\r\n}","import React, {useState} from 'react'; \r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n// RAFC para crear el componente y la importacion automatiCA!!\r\n const GifExpertApp = (  ) => {\r\n\r\n    //const categories = [ 'Surfing', 'Coding', 'David Lynch'];\r\n    \r\n    const [categories, setCategories] = useState(['Surfing']);\r\n\r\n//    const handleAdd = () =>{\r\n        //alert(\"LLAMA\");\r\n//        setCategories( ['Dreams', ...categories] ); // con el spread (...) se agregan componentes al objeto, arreglo sin convertirlo en un string!!  \r\n//   }\r\n\r\n    return( \r\n            //<Fragment> // EL FRAJMENT LO QUE JACE ES REEMPLAZAR EL DIV, JAY QUE IMPORTARLO; LA OTRA FORMA ES ESTA: \r\n            // <pre>{ JSON.stringify(yo, null, 3 ) }</pre>  FORMA DE MOSTRAR UN OBJECTO!\r\n\r\n                <>\r\n            \r\n                    \r\n                    <h2>GifExpertApp</h2>\r\n\r\n                    <AddCategory setCategories={ setCategories } />\r\n                    <ul>\r\n                        {\r\n                            categories.map( category => \r\n                                <GifGrid \r\n                                    key={ category }\r\n                                    category={ category } />\r\n\r\n                            )\r\n\r\n                        }\r\n                    </ul>\r\n                </>\r\n            );\r\n\r\n} \r\n\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\n\n\nconst divRoot = document.querySelector('#root');\n\n//ReactDOM.render( <PrimeraApp profesion=\"React Developer\"  />,  divRoot );\nReactDOM.render( <GifExpertApp />,  divRoot );\n"],"sourceRoot":""}